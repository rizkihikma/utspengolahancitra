# Import required libraries
import imageio.v2 as imageio
import numpy as np
import matplotlib.pyplot as plt

# Read the image
img = imageio.imread('lowcontrast.jpg')

# Convert to grayscale if image is RGB
if len(img.shape) == 3:
    img_gray = np.mean(img, axis=2).astype(np.uint8)
else:
    img_gray = img

# Perform histogram equalization
def histogram_equalization(img):
    # Calculate histogram
    hist, bins = np.histogram(img.flatten(), 256, [0, 256])
    
    # Calculate cumulative distribution function
    cdf = hist.cumsum()
    
    # Normalize CDF
    cdf_normalized = cdf * float(hist.max()) / cdf.max()
    
    # Create lookup table
    cdf_m = np.ma.masked_equal(cdf, 0)
    cdf_m = (cdf_m - cdf_m.min()) * 255 / (cdf_m.max() - cdf_m.min())
    cdf = np.ma.filled(cdf_m, 0).astype('uint8')
    
    # Apply histogram equalization
    img_eq = cdf[img]
    
    return img_eq

# Apply histogram equalization
img_eq = histogram_equalization(img_gray)

# Create figure with two subplots
plt.figure(figsize=(12, 6))

# Plot original image
plt.subplot(1, 2, 1)
plt.imshow(img_gray, cmap='gray')
plt.title('Original Image')
plt.axis('off')

# Plot equalized image
plt.subplot(1, 2, 2)
plt.imshow(img_eq, cmap='gray')
plt.title('Histogram Equalized Image')
plt.axis('off')

plt.tight_layout()
plt.show()

# Plot histograms
plt.figure(figsize=(12, 6))

plt.subplot(1, 2, 1)
plt.hist(img_gray.flatten(), 256, [0, 256], color='gray')
plt.title('Histogram of Original Image')
plt.xlabel('Pixel Intensity')
plt.ylabel('Frequency')

plt.subplot(1, 2, 2)
plt.hist(img_eq.flatten(), 256, [0, 256], color='gray')
plt.title('Histogram of Equalized Image')
plt.xlabel('Pixel Intensity')
plt.ylabel('Frequency')

plt.tight_layout()
plt.show()
